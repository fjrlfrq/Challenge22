 //searching
      const params = []
      const values = []
      let counter = 1

      if (req.query.id) {
        params.push(`id = $${counter++}`)
        values.push(req.query.id);
      }

      if (req.query.string && req.query.stringc) {
        params.push(`string ilike '%' || $${counter++} || '%'`)
        values.push(req.query.string);
      }

      if (req.query.integer && req.query.integerc) {
        params.push(`integer = $${counter++}`)
        values.push(req.query.integer);
      }

      if (req.query.float && req.query.floatc) {
        params.push(`float = $${counter++}`)
        values.push(req.query.float);
      }

      if (req.query.daten && req.query.datenc) {
        params.push(`daten = $${counter++}`)
        values.push(req.query.daten);
      }

      if (req.query.boolean && req.query.booleanc) {
        params.push(`boolean = $${counter++}`)
        values.push(req.query.boolean);
      }

      //pagination
      const page = req.query.page || 1
      const limit = 3
      const offset = (page - 1) * limit

      let sql = `db.user.find(`
      if (params.length > 0)
        sql += `{${params.join(',')}}).count())`

      db.query(sql, values, (err, data) => {
        if (err) return console.log('gagal ambil data', err)
        const total = data.rows[0].total
        const pages = Math.ceil(total / limit)

        sql = `db.user.find(`
        if (params.length > 0)
        sql += `{params, })`
        
        //sorting
        sql += `.limit(${counter++}).skip(${counter++})`

        db.query(sql, [...values, limit, offset], (err) => {
          if (err) return console.log('gagal ambil data', err)
          // res.render('list', { daftar: data.rows, moment, page, pages, offset, query: req.query })
      
        })
      })